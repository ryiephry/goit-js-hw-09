{"mappings":"AAoBA,SAASA,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,G,CA5BlBO,SAASC,cAAc,SAE/BC,iBAAiB,UAGxB,SAAsBC,GACpBA,EAAIC,iBAKJ,IAAIX,EAAQY,SAASF,EAAIG,cAAcb,MAAMc,OACzCC,EAAOH,SAASF,EAAIG,cAAcE,KAAKD,OACvCE,EAASJ,SAASF,EAAIG,cAAcG,OAAOF,QAoBjD,UAAmBd,MAAAiB,EAAKF,KAAEA,EAAIC,OAAEA,IAC9B,IAAK,IAAIE,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EAMrDpB,EAAcoB,EAAUD,GAErBE,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,MAEjBoB,YAAW,KACTC,QAAQC,IAAI,uBAAqBvB,QAAiBC,MAAU,GAC3DA,EAAM,IAGVuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAElBoB,YAAW,KACTC,QAAQC,IAAI,sBAAoBvB,QAAeC,MAAU,GACxDA,EAAM,IAKbiB,GAASF,C,EA3CXS,CAAQ,C,MAAExB,E,KAAOe,E,OAAMC,IAEvBN,EAAIe,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["const formEl = document.querySelector('.form'); // Select the 'form'\n\nformEl.addEventListener('submit', onFormSubmit); // Add event listener for form submission\n\n// sets up the varibles delay / step / amount inside function then calls the promise and resets form\nfunction onFormSubmit(evt) {\n  evt.preventDefault(); // Prevent the default form submission behavior\n\n  // Extract the input values from the form\n  //parseInt just converts a number thats a string to a integer\n\n  let delay = parseInt(evt.currentTarget.delay.value); // Get the 'delay' input value and convert it to an integer console.log(evt.currentTarget = the form element , but .delay is the attribute to the form / name=\"delay\")\n  let step = parseInt(evt.currentTarget.step.value); // Get the 'step' input value and convert it to an integer\n  let amount = parseInt(evt.currentTarget.amount.value); // Get the 'amount' input value and convert it to an integer\n\n  promise({ delay, step, amount }); // Call the promise function with the input values\n\n  evt.target.reset(); // Reset the form fields\n}\n// creates the random possibility of it being passed or throwing an error / returns a new promise either way returning the position and the delay in a object\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3; // Randomly determine if the promise should resolve or reject\n\n  // Create a new promise that resolves or rejects randomly based on shouldResolve\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay }); // Resolve the promise with an object containing position and delay\n    } else {\n      reject({ position, delay }); // Reject the promise with an object containing position and delay\n    }\n  });\n}\n// creates a for loop around the setTimeouts and call the createPromise inside then pass the promise value in to the .then if fullfilled console.log if not also console.log\nfunction promise({ delay, step, amount }) {\n  for (let position = 1; position <= amount; position += 1) {\n\n    // <= only works if i = 1 or more\n    // console.log(position) = the exact number interval out of amount we are at \n    // Create a promise for each position with the given delay\n   \n    createPromise(position, delay)\n     \n      .then(({ position, delay }) => {\n        // Log a success message after the specified delay\n        setTimeout(() => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);      \n        }, delay);\n      })\n\n      .catch(({ position, delay }) => {\n        // Log a failure message after the specified delay\n        setTimeout(() => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n        // reason why theres a delay by both is because only one is happening at once so you need a delay for each case \n        // setTimeout is just a 1 time delay however since there is a for loop around the setTimeout , it  happens multiple times  \n      });\n\n    delay += step; // Increase the delay by the step value for the next promise \n  }\n}"],"names":["$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","document","querySelector","addEventListener","evt","preventDefault","parseInt","currentTarget","value","step","amount","delay1","position1","then","setTimeout","console","log","catch","$47d4ff9957288465$var$promise","target","reset"],"version":3,"file":"03-promises.a74eff65.js.map"}