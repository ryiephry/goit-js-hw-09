{"mappings":"YAAA,IAAMA,EAAeC,SAASC,cAAc,QACtCC,EAAeF,SAASC,cAAc,uBACtCE,EAAeH,SAASC,cAAc,sBACtCG,EAAeJ,SAASC,cAAc,wBAExCI,GADiBL,SAASC,cAAc,yBACvB,IACjBK,EAAS,GA0Bb,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAO3B,IANA,IAAMC,EAAgBC,KAAKC,SAAW,GAM7BC,EAAI,EAAGA,EAAIZ,EAASa,MAAOD,IAClCV,EAASU,EAAIb,EAAYc,MACzBZ,EAAca,KAAKZ,EAASa,WAAWjB,EAAae,QAGpDG,YAAW,WAELP,GACFF,EAAQ,CAAEH,WAAUC,UACpBY,QAAQC,IAAI,uBAAwCC,OAAff,EAAS,QAAYe,OAANd,EAAM,SAG1DG,EAAO,CAAEJ,WAAUC,UACnBY,QAAQC,IAAI,sBAAqCC,OAAff,EAAS,QAAYe,OAANd,EAAM,O,GAIxDJ,E,IAMTN,EAAOyB,iBAAiB,UAtDxB,SAAsBC,GACpBA,EAAEC,iBAOF,IAAK,IAAIV,EAAI,EAAGA,EAAIZ,EAASa,MAAOD,IAElCT,EAAcS,EAAGd,EAAae,OAC3BU,MAAK,SAAAC,GAAWA,EAARpB,SAAeoB,EAALnB,K","sources":["src/js/03-promises.js"],"sourcesContent":["const fromEl       = document.querySelector(\"form\");\nconst firstDelayEl = document.querySelector(\"input[name='delay']\");\nconst delayStepEl  = document.querySelector(\"input[name='step']\");\nconst amountEl     = document.querySelector(\"input[name='amount']\");\nconst createBtn    = document.querySelector(\"button[type='submit']\");\nlet liveStepValue  = []//delayStepEl.value + amountEl.value;\nlet number = \"\"\n//console.log(liveStepValue)\n\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  // goal is to on submit capture the input fields in to variables \n  // then put those variables in to a function that relies on x amount of arguments\n  // console.log(firstDelayEl.value)\n  // creating a for loop that repeats promise \n\n  for (let i = 0; i < amountEl.value; i++){ // up until amount n\n    //console.log(i);\n    createPromise(i, firstDelayEl.value)\n      .then(({ position, delay }) => {\n       // console.log(`The current position is ${position} and the current value is ${delay}`)\n      })\n   \n      }\n}\n\n// gets the \n\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    //currentDelayStep()\n\n\n    //console.log(delay)\n      \n    for (let i = 0; i < amountEl.value; i++) {\n      number = i * delayStepEl.value\n      liveStepValue.push(number + parseFloat(firstDelayEl.value))\n      // console.log(liveStepValue)\n    }\n      setTimeout(() => {\n\n        if (shouldResolve) {\n          resolve({ position, delay }); // passing in data to send to user \n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      \n        } else {\n          reject({ position, delay });\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n        }\n      \n          \n      }, liveStepValue\n    \n      )\n  })\n}  \n\nfromEl.addEventListener(\"submit\", handleSubmit)"],"names":["$ce04d3a99e08e73b$var$fromEl","document","querySelector","$ce04d3a99e08e73b$var$firstDelayEl","$ce04d3a99e08e73b$var$delayStepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$liveStepValue","$ce04d3a99e08e73b$var$number","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","i","value","push","parseFloat","setTimeout","console","log","concat","addEventListener","e","preventDefault","then","param"],"version":3,"file":"03-promises.08d0774b.js.map"}