{"mappings":"AAAA,MAAMA,EAAeC,SAASC,cAAc,QACtCC,EAAeF,SAASC,cAAc,uBACtCE,EAAeH,SAASC,cAAc,sBACtCG,EAAeJ,SAASC,cAAc,wBACvBD,SAASC,cAAc,yBAC5C,IAAII,EAAiB,GACjBC,EAAS,GAuBb,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAASI,MAAOD,IAC9BD,EAASC,EAAIJ,EAAYK,MAC7BH,EAAgBC,EAASG,WAAWP,EAAaM,OACjDE,QAAQC,IAAIN,GAId,SAASO,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAItCV,QAAQC,IAAIG,GAEVO,YAAW,KAELH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IACpBJ,QAAQC,IAAI,uBAAqBE,QAAiBC,SAGlDG,EAAO,C,SAAEJ,E,MAAUC,IACnBJ,QAAQC,IAAI,sBAAoBE,QAAeC,O,GAI9CT,EACJ,G,CAkBPN,EAAOuB,iBAAiB,UAlExB,SAAsBC,GACpBA,EAAEC,iBAOF,IAAK,IAAIC,EAAI,EAAGA,EAAIrB,EAASI,MAAOiB,IAElCb,EAAca,EAAGvB,EAAaM,OAC3BkB,MAAK,EAACb,SAAEA,EAAQC,MAAEA,MAAb,G","sources":["src/js/03-promises.js"],"sourcesContent":["const fromEl       = document.querySelector(\"form\");\nconst firstDelayEl = document.querySelector(\"input[name='delay']\");\nconst delayStepEl  = document.querySelector(\"input[name='step']\");\nconst amountEl     = document.querySelector(\"input[name='amount']\");\nconst createBtn    = document.querySelector(\"button[type='submit']\");\nlet liveStepValue  = \"\"//delayStepEl.value + amountEl.value;\nlet number = \"\"\n//console.log(liveStepValue)\n\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  // goal is to on submit capture the input fields in to variables \n  // then put those variables in to a function that relies on x amount of arguments\n  // console.log(firstDelayEl.value)\n  // creating a for loop that repeats promise \n\n  for (let i = 0; i < amountEl.value; i++){ // up until amount n\n    //console.log(i);\n    createPromise(i, firstDelayEl.value)\n      .then(({ position, delay }) => {\n       // console.log(`The current position is ${position} and the current value is ${delay}`)\n      })\n   \n      }\n}\n\n// gets the milliseconds for delay step \nfor (let i = 0; i < amountEl.value; i++){\n      number = i * delayStepEl.value\n  liveStepValue = number + parseFloat(firstDelayEl.value) \n  console.log(liveStepValue)\n}\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    //currentDelayStep()\n\n\n    console.log(delay)\n    \n      setTimeout(() => {\n\n        if (shouldResolve) {\n          resolve({ position, delay }); // passing in data to send to user \n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      \n        } else {\n          reject({ position, delay });\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n        }\n      \n          \n        }, liveStepValue\n      )\n    \n \n  })\n}  \n\n\n\n\n\n// function currentDelayStep() {\n//   for (let i = 0; i < amountEl.value; i++) {\n//     liveStepValue = delayStepEl.value * i\n//     console.log(liveStepValue)\n//   }\n// }\n// currentDelayStep()\n\nfromEl.addEventListener(\"submit\", handleSubmit)"],"names":["$47d4ff9957288465$var$fromEl","document","querySelector","$47d4ff9957288465$var$firstDelayEl","$47d4ff9957288465$var$delayStepEl","$47d4ff9957288465$var$amountEl","$47d4ff9957288465$var$liveStepValue","$47d4ff9957288465$var$number","i","value","parseFloat","console","log","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","i1","then"],"version":3,"file":"03-promises.09432f18.js.map"}